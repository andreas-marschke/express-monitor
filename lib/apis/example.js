"use strict";
/**
 * API configuration object defining behavior and configuration for API setup
 *
 * @typedef APIConfig
 * @property {string} example - example string passed in for configuration
 * @example
 * new monitor.Manager({
 *  // Configures the API specific API service
 *  server: {
 *    example: {
 *      example: "simple-string"
 *    }
 *  },
 *  // enable specific API
 *  apis: ["example"],
 *  // Use one of the predefined modules or replace it with your own
 *  module: {
 *    example: require("./example.js")
 *  }
 * });
 */

/**
 * Object returned containing API specific state management to start/stop and check an API Instance for activity
 *
 * @typedef APIObject
 * @property {function} start - starts the API service
 * @property {function} stop - stop the API service
 * @property {function} active - Check if the service is currently  active or not
 */

/**
 * Example API module for interaction and polling purposes to access
 * the monitoring manager and state data generated by the manager.
 *
 * @constructor
 * @module
 * @name Example
 *
 * @param {Manager} manager - Manager instance passed in for state retrieval and configuration management
 * @param {APIConfig} config - API Endpoint specific configuration
 *
 * @return {APIObject} - API controlling object passed back to Manager to take care of starting/stopping the service
 */
module.exports = function(manager, config) {

  var example = config.example || "default";

  return {
    start: function() {},
    stop: function() {},
    active: function() {}
  };
};
